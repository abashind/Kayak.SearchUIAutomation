// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace JuribaKayak.SearchUIAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Search plane tickets at https://kayak.com", Description=@"	As a: person who wants to travel
	In order to: buy plane tickets to the direction I need
	I want to: search the tickets using the search form
	So that: search outcome will show tickets that correspond to search criteria

	PS:
	We could've used a scenario outline here but scenarios are too different for that.

	Basically the search functionality itself is one of the first candidates for API testing, 
	but the test assignment specification requires to use Selenium.

	Ideally screenshots should be tacken when smth goes wrong but for that I need to 
	implement scrolling to the desired ticket item which can't be done due to lack of time.", SourceFile="Features\\Search.feature", SourceLine=0)]
    public partial class SearchPlaneTicketsAtHttpsKayak_ComFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Search.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Search plane tickets at https://kayak.com", @"	As a: person who wants to travel
	In order to: buy plane tickets to the direction I need
	I want to: search the tickets using the search form
	So that: search outcome will show tickets that correspond to search criteria

	PS:
	We could've used a scenario outline here but scenarios are too different for that.

	Basically the search functionality itself is one of the first candidates for API testing, 
	but the test assignment specification requires to use Selenium.

	Ideally screenshots should be tacken when smth goes wrong but for that I need to 
	implement scrolling to the desired ticket item which can't be done due to lack of time.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search plane tickets in one-way direction for 1 adult person", new string[] {
                "oneway",
                "single"}, SourceLine=17)]
        public virtual void SearchPlaneTicketsInOne_WayDirectionFor1AdultPerson()
        {
            string[] tagsOfScenario = new string[] {
                    "oneway",
                    "single"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search plane tickets in one-way direction for 1 adult person", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Amount"});
                table1.AddRow(new string[] {
                            "Adults",
                            "1"});
#line 19
 testRunner.Given("the next amount of travelers wants to fly out:", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClassOfService",
                            "CarryOnBags",
                            "CheckedBags",
                            "From",
                            "To",
                            "WhenToThere",
                            "WhenBack"});
                table2.AddRow(new string[] {
                            "Economy",
                            "0",
                            "0",
                            "UFA",
                            "SVO",
                            "2021-11-25",
                            "--"});
#line 22
 testRunner.And("the rest of search field are filled out with the next values:", ((string)(null)), table2, "And ");
#line hidden
#line 25
 testRunner.When("search button is pressed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("every item on the outcome first page has \'1\' flights", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.And("the flight/s have the right direction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("every item on the outcome first page has \'1\' seat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search plane tickets for a round trip for 1 adult person", new string[] {
                "roundtrip",
                "single"}, SourceLine=30)]
        public virtual void SearchPlaneTicketsForARoundTripFor1AdultPerson()
        {
            string[] tagsOfScenario = new string[] {
                    "roundtrip",
                    "single"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search plane tickets for a round trip for 1 adult person", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Amount"});
                table3.AddRow(new string[] {
                            "Adults",
                            "1"});
#line 32
 testRunner.Given("the next amount of travelers wants to fly out:", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClassOfService",
                            "CarryOnBags",
                            "CheckedBags",
                            "From",
                            "To",
                            "When to there",
                            "When back"});
                table4.AddRow(new string[] {
                            "Economy",
                            "0",
                            "0",
                            "UFA",
                            "SVO",
                            "2021-11-25",
                            "2021-11-27"});
#line 35
 testRunner.And("the rest of search field are filled out with the next values:", ((string)(null)), table4, "And ");
#line hidden
#line 38
 testRunner.When("search button is pressed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.Then("every item on the outcome first page has \'2\' flights", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.And("the flight/s have the right direction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("every item on the outcome first page has \'1\' seat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search plane tickets for a round trip for 2 adult person", new string[] {
                "roundtrip",
                "two"}, SourceLine=43)]
        public virtual void SearchPlaneTicketsForARoundTripFor2AdultPerson()
        {
            string[] tagsOfScenario = new string[] {
                    "roundtrip",
                    "two"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search plane tickets for a round trip for 2 adult person", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Amount"});
                table5.AddRow(new string[] {
                            "Adults",
                            "2"});
#line 45
 testRunner.Given("the next amount of travelers wants to fly out:", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClassOfService",
                            "CarryOnBags",
                            "CheckedBags",
                            "From",
                            "To",
                            "When to there",
                            "When back"});
                table6.AddRow(new string[] {
                            "Economy",
                            "0",
                            "0",
                            "UFA",
                            "SVO",
                            "2021-11-25",
                            "2021-11-27"});
#line 48
 testRunner.And("the rest of search field are filled out with the next values:", ((string)(null)), table6, "And ");
#line hidden
#line 51
 testRunner.When("search button is pressed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.Then("every item on the outcome first page has \'2\' flights", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.And("the flight/s have the right direction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And("every item on the outcome first page has \'2\' seat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
